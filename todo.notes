

TODO:

  - BACKEND:

    [ ] Re-structure code to use services instead of handling all the logic in the routers    

    [ ] Add test files


  - FRONTEND:

    [ ] Add test files
  
    - Admin side:


    - Patient side:

      [ ] When trying to access the appointments page and the login page is showned because the user is not logged in, two toasts are appearing      

  - Features:

    [√] Enable appointment creation by the patient
      
      [√]  FRONTEND:
        [√] Add appointments.ts to api folder and define required methods:
          - getAppointments(doctorId, hospitalId, month): Appointment[]
          - saveAppointment(doctorId, hospitalId, appointment)

        [√] Add save button

        [√] Create save button handler that will call to saveAppointment

        [ ] Change CalendarDate to CalendarDateAvailableAppointments

        [ ] Create CalendarDate to hold the logic that shows a date in CalendarMonth

        [√] In AppointmentPage obtain hospital and doctor in order to pass it to CalendarMonth 
            so it has the information to show their names in the message when creating an appointment

        [√] Create an appointment
          1- Select hospital
          2- Select doctor that works in that hospital
          3- Using the calendar corresponding to that doctor and hospital show current's month calendar
            so that the patient can select a day. (*)
          4- With a specific date selected, use the days' configuration and the existing appointments
            to show the hours available to schedule an appointment.
          
          (*)
          Notes:
            - When showing the month view (previous step of selecting a specific date) use the days'
              configuration and the existing appointments to show as selectable the dates that do not have
              all the appointments taken
            - Take the dates between tomorrow and the last day of the month
              group them by appointment date
              only show those which count is less than (((the total amount of appointments that can exist)))





DONE:

  [√] Al crear hour ranges solo crea algunos. No se si se reproduce asi nomas:
    · RAZON: había dejado mal una parte del código y nunca se creaban realmente los hour ranges

  - FRONTEND:
    [√] Add alert question before removen calendar from a doctor

    [√] Change font for days of the week in calendar

    [√] Add routes inside /patient to get appointments and to enable appointment creation
  
    [√] Order ASC range hours by id when retreiving them for appointment creation

    [√] When login in as a patient, it is not redirecting to the patients home page

    [√] Save the hour ranges (and therefore, the days) that the user have configured (ConfigureDays.tsx)
        - Decide which is the factor that indicates when to create an hour range / day and when to update it:
          How to decide:
            - If a day has the id field with a value, the update the day and
              - If the hour range has the id field with a value, the update the hour range
              - Otherwise: create the hour range
            - Otherwise: create the day
              - Create the hour ranges

    [√] Hour range delete isn't working
    
    [√] REFACTOR appointment FOLDER BECAUSE WE NO LONGER USING APPOINTMETS AS
        A SEPARATE PAGE, IT DEPENDS ON PATIENTS

    [√] Ver por qué no esta trayendo los doctores asociados al hospital cuando se selecciona en el componente principal de patients

    [√] Guardar info para saber que hay un usuario logueado
      . OP 1: usar context para setear y verificar si el usuario está o no logueado
      . OP 2: usar localStorage
      (https://www.digitalocean.com/community/tutorials/how-to-add-login-authentication-to-react-applications#step-3-storing-a-user-token-with-sessionstorage-and-localstorage)

    [√] Ya hice la validación de campos para registro. Ahora tengo que finalizar el registro
        del usuario primero en frontend/api y después impactando en backend.
      . Encriptar password que introduce el usuario, tanto cuando se registra un usuario
        como cuando se intenta loguear

    [√] Reestructurar el flujo de trabajo ya que
      . El paciente debe estar logueado para poder crear citas con los médicos
      . La sección de administración debe estar oculta. Solo se debe acceder por URL

    [√] Al loguearse esta mostrando 2 mensajes. El de info lo debería mostrar solo cuando se accede
      a la página signin y ya se está logueado

    [√] Mostrar header en vistas de sign up y sign in

    [√] Ya esta el registro para pacientes:
      . Construir el formulario de logueo

    [√] Crear 2 Routes personalizados para las routes que necesiten autenticación:
      . PatientAuthRoute: para verificar si el usuario esta logueado y en caso de
        no estarlo redirigir a la página de login para pacientes
      . AdminAuthRoute: idem pero para usuarios admin y usando el login de admin
      (https://stackoverflow.com/questions/43164554/how-to-implement-authenticated-routes-in-react-router-4/43171515#43171515)
    
    [√] Tengo que ver por qué no se actualiza el header después de logearse (ADMIN)

    

  - BACKEND:

    [√] Agregar routes públicas (fuera de /admin) a las que se pueda consultar al momento de crear los appointments.
      Tal vez dentro de /patient. Por ejemplo: si quiero obtener los hospitales estando logeado como paciente, debería poder obtenerlos

    [√] Usar passport y passport-local para la autenticación

    [√] Ya esta el registro para pacientes:
      . Recordar usar bcrypt para comparar contra la password guardada (EN BACKEND SE HACE LA COMPARACIÓN)

    - ###############################
      // --- Imports ---

        const express = require('express')
        const app = express()

        const passport = require('passport')
        const session = require('express-session')

        const LocalStrategy = require('passport-local').Strategy

      // --- Initialize Middleware ---

        // This is the basic express session({..}) initialization.
        app.use(session({
          secret: "secret",
          resave: false ,
          saveUninitialized: true ,
        }))

        // init passport on every route call.
        app.use(passport.initialize()) 
        
        // allow passport to use "express-session".
        app.use(passport.session())

        // --- Use Passport to define the Authentication Strategy ---

        passport.use(new LocalStrategy (authUser))

        En caso de querer usar diferentes local-strategies se puede poner nombre del siguiente modo:
        - passport.use('patient-login', new LocalStrategy (authUserCb1));
        - passport.use('admin-login', new LocalStrategy (authUserCb2));

        en authUserCb1 puedo devolver {model: 'patient', user: dbUser}

      (https://medium.com/@prashantramnyc/node-js-with-passport-authentication-simplified-76ca65ee91e5)
      (https://volk.dev/blog/implement-multiple-local-user-authentication-strategies-in-passport-js)
      ###############################



---------------------------------------------




